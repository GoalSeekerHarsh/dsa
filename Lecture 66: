  Question 1).https://practice.geeksforgeeks.org/problems/construct-tree-1/1
  Approach 1
  class Solution{
    public:
    int findPosition(int in[], int start, int end, int data){
        for(int i = start; i <= end; i ++){
            if(in[i] == data){
                return i;
            }
        }
        return -1;
    }
    Node* solve(int in[], int pre[], int &preOrderIndex, int inOrderStart, int inOrderEnd, int n){
        if(preOrderIndex >= n || inOrderStart > inOrderEnd){
            return NULL;
        }    
        Node* root = new Node(pre[preOrderIndex++]);
        
        int position = findPosition(in, inOrderStart, inOrderEnd, root->data);
        
        root->left = solve(in, pre, preOrderIndex, inOrderStart, position - 1, n);
        root->right = solve(in, pre, preOrderIndex, position + 1, inOrderEnd, n);
        
        return root;
    }
    
    Node* buildTree(int in[],int pre[], int n)
    {
        // Code here
        int preOrderIndex = 0;
        Node* result = solve(in, pre, preOrderIndex, 0, n-1, n);
        return result;
    }
};

 Approach 2
 class Solution{
    public:
    void createmap(int in[],map<int,int> &nodetoindex,int n){
        for(int i=0;i<n;i++){
            nodetoindex[in[i]]=i;
        }
    }
    Node* solve(int in[],int pre[],int index,int instart,int inend,int n,map<int,int>&nodetoindex){
        if(instart>inend || index>n){
            return NULL;
        }
        int element=pre[index++];
        int position=nodetoindex[element];
        Node* root=new Node(element);
        root->left=solve(in,pre,index,instart,position-1,n,nodetoindex);
        root->right=solve(in,pre,index,position+1,inend,n,nodetoindex);
        return root;
    }
    Node* buildTree(int in[],int pre[], int n)
    {
        int preorderindex=0;
         map<int,int>nodetoindex;
         createmap(in,nodetoindex,n);
         Node*ans=solve(in,pre,preorderindex,0,n-1,n,nodetoindex);
         return ans;
    }
};
