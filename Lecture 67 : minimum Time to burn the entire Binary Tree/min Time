#include <iostream>
#include <queue>
#include <map>

using namespace std;

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x)
    {
        data = x;
        left = right = NULL;
    }
};

class Solution {

    public:
    // create mapping
    // return target node
    Node* createParentMapping(Node* root, int target, map<Node*, Node*> &nodeToParent)
    {
        Node* res = NULL;
        queue<Node*> q;
        q.push(root);
        nodeToParent[root] = NULL;

        while (!q.empty())
        {
            Node* front = q.front();
            q.pop();

            if (front -> data = target) // find target
            {
                res = front;
            }
            
            if (front -> left)
            {
                nodeToParent[front -> left] = front;
                q.push(front -> left);
            }
            
            if (front -> right)
            {
                nodeToParent[front -> right] = front;
                q.push(front -> right);
            }
            
        }
        return res;
    }

    void burnTree(Node* root, map<Node*, Node*> &nodeToParent, int &time)
    {
        map<Node*, bool> visited;
        queue<Node*> q;

        q.push(root);
        visited[root] = true;

        int time = 0;
        while (!q.empty())
        {
            bool flag = 0; // koi addition hua hai ki nhi usko pta krna hai
            int size = q.size();
            for (int i = 0; i < size; i++)
            {
                // process neighbouring node
                Node* front = q.front();
                q.pop();

                if (front -> left && !visited[front -> left])
                {
                    flag = true;
                    q.push(front -> left);
                    visited[front -> left] = 1;
                }
                if (front -> right && !visited[front -> right])
                {
                    flag = true;
                    q.push(front -> right);
                    visited[front -> right] = 1;
                }
                if (nodeToParent[front] && !visited[nodeToParent[front]])
                {
                    flag = true;
                    q.push(nodeToParent[front]);
                    visited[nodeToParent[front]] = 1;
                }
                
            }
            
            if (flag == true)
            {
                time++;
            }
            
        }
        
    }

    int minTime(Node* root, int target)
    {
        // algo : 
        // step 1 : create nodeToParent mapping
        // step 2 : find target Node
        // step 3 : burn the tree in min time

        int time = 0;
        map<Node*, Node*> nodeToParent;
        Node* targetNode = createParentMapping(root, target, nodeToParent);

        burnTree(targetNode, nodeToParent, time);

        return time;
    }

};

int main(int argc, char const *argv[])
{
    
    
    return 0;
}
