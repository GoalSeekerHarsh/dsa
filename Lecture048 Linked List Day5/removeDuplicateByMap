

Node *removeDuplicates(Node *head)
{
     // If list is empty or has only one node
    if(head == NULL || head->next == NULL) {
        return head;
    }
    
    // Create a map to store frequency of elements
    unordered_map<int, int> freqMap;
    
    Node* curr = head;
    Node* prev = NULL;
    
    // Traverse through the list
    while(curr != NULL) {
        // If element is already in map (means it's a duplicate)
        if(freqMap[curr->data] == 1) {
            // Remove the current node
            prev->next = curr->next;
            delete curr;
            curr = prev->next;
        }
        else {
            // Add element to map
            freqMap[curr->data] = 1;
            prev = curr;
            curr = curr->next;
        }
    }
    
    return head;
}
